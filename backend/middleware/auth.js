const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
const { sql, poolPromise } = require("../config/db");

// üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post("/register", async (req, res) => {
  const { email, password, isAdmin } = req.body;

  try {
    const pool = await poolPromise;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    const existing = await pool.request()
      .input("Email", sql.NVarChar(100), email)
      .query("SELECT * FROM Users WHERE Email = @Email");

    if (existing.recordset.length > 0) {
      return res.status(409).json({ message: "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –≤–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞" });
    }

    await pool.request()
      .input("Email", sql.NVarChar(100), email)
      .input("Password", sql.NVarChar(100), password)
      .input("IsAdmin", sql.Bit, isAdmin || 0)
      .query("INSERT INTO Users (Email, Password, IsAdmin) VALUES (@Email, @Password, @IsAdmin)");

    res.status(201).json({ message: "–£—Å–ø–µ—à–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" });
  } catch (err) {
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", error: err.message });
  }
});

// üîë –í—Ö–æ–¥
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("Email", sql.NVarChar(100), email)
      .input("Password", sql.NVarChar(100), password)
      .query("SELECT * FROM Users WHERE Email = @Email AND Password = @Password");

    const user = result.recordset[0];
    if (!user) return res.status(401).json({ message: "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏" });

    // ‚úÖ –í–∫–ª—é—á–≤–∞–º–µ –∏ id, –∏ isAdmin –≤ —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { id: user.UserID, isAdmin: user.IsAdmin },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({ token });
  } catch (err) {
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥", error: err.message });
  }
});

module.exports = router;
