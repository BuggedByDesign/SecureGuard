const express = require("express");
const router = express.Router();
const { sql, poolPromise } = require("../config/db");

// üîç –í–ó–ò–ú–ê –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ —Ä–µ–≤—é –ø–æ ProductID
router.get("/:productId", async (req, res) => {
  const { productId } = req.params;
  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input("ProductID", sql.Int, productId)
      .query("SELECT * FROM ExpertReviews WHERE ProductID = @ProductID");

    res.json(result.recordset);
  } catch (err) {
    console.error("‚ùå Expert Review GET Error:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Ä–µ–≤—é—Ç–æ" });
  }
});

// üíæ –ó–ê–ü–ê–ó–í–ê –∏–ª–∏ –ê–ö–¢–£–ê–õ–ò–ó–ò–†–ê –µ–∫—Å–ø–µ—Ä—Ç–Ω–æ —Ä–µ–≤—é
router.put("/:productId", async (req, res) => {
  const { productId } = req.params;
  const {
    ourReview,
    pros,
    cons,
    bottomLine,
    malware,
    performance,
    ui,
    value,
    protectionFeatures
  } = req.body;

  try {
    const pool = await poolPromise;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –≤–µ—á–µ –∑–∞–ø–∏—Å –∑–∞ —Ç–æ–∑–∏ –ø—Ä–æ–¥—É–∫—Ç
    const check = await pool.request()
      .input("ProductID", sql.Int, productId)
      .query("SELECT * FROM ExpertReviews WHERE ProductID = @ProductID");

    if (check.recordset.length > 0) {
      // –ê–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ ‚Äì –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–∞–π
      await pool.request()
        .input("ProductID", sql.Int, productId)
        .input("OurReview", sql.NVarChar(sql.MAX), ourReview)
        .input("Pros", sql.NVarChar(sql.MAX), pros)
        .input("Cons", sql.NVarChar(sql.MAX), cons)
        .input("BottomLine", sql.NVarChar(sql.MAX), bottomLine)
        .input("MalwareProtection", sql.Float, malware)
        .input("PerformanceImpact", sql.Float, performance)
        .input("UserInterface", sql.Float, ui)
        .input("ValueForMoney", sql.Float, value)
        .input("ProtectionFeatures", sql.NVarChar(sql.MAX), protectionFeatures)
        .query(`
          UPDATE ExpertReviews SET
            OurReview = @OurReview,
            Pros = @Pros,
            Cons = @Cons,
            BottomLine = @BottomLine,
            MalwareProtection = @MalwareProtection,
            PerformanceImpact = @PerformanceImpact,
            UserInterface = @UserInterface,
            ValueForMoney = @ValueForMoney,
            ProtectionFeatures = @ProtectionFeatures
          WHERE ProductID = @ProductID
        `);
      res.json({ message: "–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–µ–Ω–æ —Ä–µ–≤—é—Ç–æ!" });
    } else {
      // –ê–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ ‚Äì —Å—ä–∑–¥–∞–π –Ω–æ–≤ –∑–∞–ø–∏—Å
      await pool.request()
        .input("ProductID", sql.Int, productId)
        .input("OurReview", sql.NVarChar(sql.MAX), ourReview)
        .input("Pros", sql.NVarChar(sql.MAX), pros)
        .input("Cons", sql.NVarChar(sql.MAX), cons)
        .input("BottomLine", sql.NVarChar(sql.MAX), bottomLine)
        .input("MalwareProtection", sql.Float, malware)
        .input("PerformanceImpact", sql.Float, performance)
        .input("UserInterface", sql.Float, ui)
        .input("ValueForMoney", sql.Float, value)
        .input("ProtectionFeatures", sql.NVarChar(sql.MAX), protectionFeatures)
        .query(`
          INSERT INTO ExpertReviews (
            ProductID, OurReview, Pros, Cons, BottomLine,
            MalwareProtection, PerformanceImpact, UserInterface,
            ValueForMoney, ProtectionFeatures
          )
          VALUES (
            @ProductID, @OurReview, @Pros, @Cons, @BottomLine,
            @MalwareProtection, @PerformanceImpact, @UserInterface,
            @ValueForMoney, @ProtectionFeatures
          )
        `);
      res.json({ message: "–†–µ–≤—é—Ç–æ –±–µ—à–µ –¥–æ–±–∞–≤–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!" });
    }

  } catch (err) {
    console.error("‚ùå ExpertReviews PUT Error:", err);
    res.status(500).json({ message: "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å –Ω–∞ —Ä–µ–≤—é—Ç–æ" });
  }
});

module.exports = router;
